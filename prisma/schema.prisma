generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  ttnId     String?  // Identifiant TTN de l'utilisateur
  sensors   Sensor[] // Relation avec les capteurs
  alertSensorId Int? // ID du capteur qui contrôle les alertes (bouton)
  alertsEnabled Boolean @default(true) // État des alertes
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Sensor {
  id        Int         @id @default(autoincrement())
  name      String      // Nom du capteur
  type      SensorType  // Type de capteur (SOUND, VIBRATION, BUTTON)
  isBinary  Boolean     @default(false) // Indique si le capteur est binaire (ON/OFF) ou continu
  deviceId  String      @db.VarChar(50)
  joinEui   String      @db.VarChar(16)
  devEui    String      @db.VarChar(16)
  userId    Int         // Clé étrangère vers User
  user      User        @relation(fields: [userId], references: [id])
  data      SensorData[] // Relation avec les données
  threshold Threshold?  // Relation avec le seuil
  alertLogs AlertLog[]  // Relation avec les logs d'alertes
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@unique([deviceId, joinEui, devEui])
  @@index([deviceId])
  @@index([joinEui])
  @@index([devEui])
  @@index([userId])
}

model SensorData {
  id        Int      @id @default(autoincrement())
  value     Int
  timestamp DateTime @default(now())
  sensorId  Int
  sensor    Sensor   @relation(fields: [sensorId], references: [id])
  alertLogsStart AlertLog[] @relation("AlertStartData") // Alertes démarrées par cette donnée
  alertLogsEnd   AlertLog[] @relation("AlertEndData")   // Alertes terminées par cette donnée

  @@index([sensorId])
  @@index([timestamp])
}

model Threshold {
  id        Int      @id @default(autoincrement())
  value     Float    // Valeur du seuil
  sensorId  Int      @unique // Clé étrangère vers Sensor (relation 1:1)
  sensor    Sensor   @relation(fields: [sensorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sensorId])
}

// Modèle pour l'historique des alertes
model AlertLog {
  id          Int       @id @default(autoincrement())
  startDataId Int       // ID de la donnée qui a déclenché l'alerte
  endDataId   Int?      // ID de la donnée qui a terminé l'alerte (null si l'alerte est toujours active)
  thresholdValue Float?  // Valeur du seuil au moment de l'alerte (pour les capteurs numériques)
  sensorId    Int       // Clé étrangère vers Sensor
  sensor      Sensor    @relation(fields: [sensorId], references: [id])
  startData   SensorData @relation("AlertStartData", fields: [startDataId], references: [id])
  endData     SensorData? @relation("AlertEndData", fields: [endDataId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([sensorId])
  @@index([startDataId])
  @@index([endDataId])
}

enum SensorType {
  SOUND
  VIBRATION
  BUTTON
} 