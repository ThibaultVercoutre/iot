generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  ttnId     String?  // Identifiant TTN de l'utilisateur
  devices   Device[] // Relation avec les devices
  alertSensorId Int? // ID du capteur qui contrôle les alertes (bouton)
  alertsEnabled Boolean @default(true) // État des alertes
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Device {
  id        Int      @id @default(autoincrement())
  name      String   // Nom du device (ex: test-simulate)
  joinEui   String   @db.VarChar(16)
  devEui    String   @db.VarChar(16)
  userId    Int      // Clé étrangère vers User
  user      User     @relation(fields: [userId], references: [id])
  sensors   Sensor[] // Relation avec les capteurs
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([joinEui, devEui])
  @@index([userId])
}

model Sensor {
  id          Int       @id @default(autoincrement())
  name        String
  type        SensorType
  uniqueId    String    @unique
  deviceId    Int
  isBinary    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  device      Device    @relation(fields: [deviceId], references: [id])
  historicalData SensorData[]
  threshold   Threshold?
  alertLogs   AlertLog[]

  @@unique([deviceId, uniqueId])
}

model SensorData {
  id        Int      @id @default(autoincrement())
  value     Int
  timestamp DateTime @default(now())
  sensorId  Int
  sensor    Sensor   @relation(fields: [sensorId], references: [id], onDelete: Cascade)
  alertLogsStart AlertLog[] @relation("AlertStartData") // Alertes démarrées par cette donnée
  alertLogsEnd   AlertLog[] @relation("AlertEndData")   // Alertes terminées par cette donnée

  @@index([sensorId])
  @@index([timestamp])
}

model Threshold {
  id        Int      @id @default(autoincrement())
  value     Float    // Valeur du seuil
  sensorId  Int      @unique // Clé étrangère vers Sensor (relation 1:1)
  sensor    Sensor   @relation(fields: [sensorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sensorId])
}

// Modèle pour l'historique des alertes
model AlertLog {
  id          Int       @id @default(autoincrement())
  startDataId Int       // ID de la donnée qui a déclenché l'alerte
  endDataId   Int?      // ID de la donnée qui a terminé l'alerte (null si l'alerte est toujours active)
  thresholdValue Float?  // Valeur du seuil au moment de l'alerte (pour les capteurs numériques)
  sensorId    Int       // Clé étrangère vers Sensor
  sensor      Sensor    @relation(fields: [sensorId], references: [id], onDelete: Cascade)
  startData   SensorData @relation("AlertStartData", fields: [startDataId], references: [id], onDelete: Cascade)
  endData     SensorData? @relation("AlertEndData", fields: [endDataId], references: [id], onDelete: SetNull)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([sensorId])
  @@index([startDataId])
  @@index([endDataId])
}

enum SensorType {
  SOUND
  VIBRATION
  BUTTON
} 